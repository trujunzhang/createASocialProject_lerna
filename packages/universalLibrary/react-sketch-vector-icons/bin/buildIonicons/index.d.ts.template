/**
 * react-svg-ionicons v@{package-version} with svg files from Ionicons v@{ionicon-version}
 *
 * @{dual-icons} dual-mode icons, @{logo-icons} logo icons.
 *
 * @auhtor aMarCruz <amarcruzbox-git@yahoo.com>
 * @date @{date}
 * @license MIT
 */
import * as React from 'react';

type Dict<T = any> = { [k: string]: T };

// tslint:disable-next-line:ban-types
export type Nullable<T> = { [K in keyof T]: (Object extends T[K] ? Nullable<T[K]> : T[K]) | null };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * SVG icon renderizer.
 */
export interface SVGIcon {
  (opts: object, iconTitle: string, ios?: boolean): JSX.Element;
}

/**
 * IonIcon class properties and attributes.
 */
export interface IonIconProps<T extends string> extends
    Omit<React.SVGAttributes<SVGSVGElement>, 'xmlns' | 'viewBox' | 'children'> {
  /**
   * The name with which the icon was registered.
   */
  name: T;
  /**
   * Color for `fill` and `stroke`, in any format accepted by CSS.
   */
  color?: string;
  /**
   * Value for `width` and `height`, any format accepted by CSS.
   */
  size?: string | number;
  /**
   * Icon style, overrides automatic detection of the platform.
   */
  mode?: 'ios' | 'md';
  /**
   * Overrides the default icon title (icon name in Title Case).
   */
  title?: string;
  /**
   * React `ref` to the `<svg>` element.
   */
  innerRef?: React.Ref<SVGSVGElement>;
}

/**
 * Bundle with name to icon translations
 */
export type IconMap = { [K in IconNames]?: SVGIcon };

/**
 * Allows to accept custom names in addIcons.
 */
export type CustomIconMap = Dict<SVGIcon | null | undefined>;

/**
 * Possible defaults
 */
export interface IonIconDefs extends Omit<IonIconProps<''>, 'name' | 'title' | 'innerRef'> {
}

/**
 * Size aliases
 */
export type IonIconSizes = Dict<string | number | undefined>;

/**
 * Main component to render a SVG ionicon.
 */
export declare class IonIcon extends React.PureComponent<IonIconProps<IconNames>> {
}

/**
 * Merge the given icons with the existent ones.
 *
 * To remove existing icons, set its value to `null` of `undefined`.
 *
 * @param iconMap Object with name-icon translations.
 */
export function addIcons(iconMap: Nullable<IconMap> & CustomIconMap): void;

/**
 * Merge the given values with the current defaults.
 *
 * Values with `null` or `undefined` will remove the existing property.
 *
 * @param defaults Properties to merge.
 */
export function setDefaults(defaults: Nullable<IonIconDefs>): void;

/**
 * Reset the table of named sizes.
 *
 * You can use custom names here, to remove the prdefined names, 'small'
 * and 'large', set them to `null` or `undefined`.
 *
 * @param sizes Object with a sizes map.
 */
export function setSizes(sizes: Nullable<IonIconSizes>): void;

/**
 * Add icon titles to the icon-name -> title transtations.
 *
 * @param sizes Object with a {icon-name: title} props.
 */
export function setTitles(iconTitles: Dict<string | null>): void;

/**
 * Class or space separated classes to add to the `className` property
 * of all the icons, in addition to the default or specific one.
 *
 * @param class Class or space separated list of classes.
 */
export function setBaseClass(classes: string): void;

/**
 * Icon names
 */
export type IconNames =
@{names}
;
